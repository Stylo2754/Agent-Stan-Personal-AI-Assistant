{
  "name": "Create Gcal Invite",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "email"
            },
            {
              "name": "startTime"
            },
            {
              "name": "accountType"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "bdf2607f-88af-4205-805b-8a5c82803d66",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f1c96dd6-804c-410c-a862-9519ed3f21ba",
              "leftValue": "accountType",
              "rightValue": "personal",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        660,
        0
      ],
      "id": "3ca80d13-20be-46ba-869c-f8a0876c3d4a",
      "name": "If"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "stanley.lo.2754@gmail.com",
          "mode": "list",
          "cachedResultName": "stanley.lo.2754@gmail.com"
        },
        "start": "={{$node[\"If\"].json.startTime}}",
        "end": "={{$node[\"If\"].json.endTime}}",
        "additionalFields": {
          "attendees": [
            "={{ $node[\"When Executed by Another Workflow\"].json.email }}"
          ],
          "conferenceDataUi": {
            "conferenceDataValues": {
              "conferenceSolution": "hangoutsMeet"
            }
          },
          "summary": "=Stanley & {{$node[\"When Executed by Another Workflow\"].json.email}} Meeting"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        880,
        -100
      ],
      "id": "fa3b6a63-a9a4-45d6-948c-bd9af8643e44",
      "name": "Create an event (Personal)",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "NtBcXZKA5ISqFuMW",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "slo24@students.claremontmckenna.edu",
          "mode": "list",
          "cachedResultName": "slo24@students.claremontmckenna.edu"
        },
        "start": "={{$node[\"If\"].json.startTime}}",
        "end": "={{$node[\"If\"].json.endTime}}",
        "additionalFields": {
          "attendees": [
            "={{ $node[\"When Executed by Another Workflow\"].json.email }}"
          ],
          "conferenceDataUi": {
            "conferenceDataValues": {
              "conferenceSolution": "hangoutsMeet"
            }
          },
          "summary": "=Stanley & {{ $node[\"When Executed by Another Workflow\"].json.email }} Meeting"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        880,
        100
      ],
      "id": "f4cab4cc-f21a-43c5-a8b4-f424b0041882",
      "name": "Create an event (School)",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "NtBcXZKA5ISqFuMW",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the first item from the input\nconst item = $input.item.json;\n\n// Get the startTime string from the input JSON\nconst startTime = item.startTime;\n\n// --- Dependency-Free Date Calculation ---\n\n// 1. Create a JavaScript Date object from the ISO string.\nconst startDate = new Date(startTime);\n\n// 2. Get the time in milliseconds and add 30 minutes (30 * 60 * 1000 milliseconds).\nconst newTimeInMs = startDate.getTime() + (30 * 60 * 1000);\n\n// 3. Create a new Date object with the new time.\nconst endDate = new Date(newTimeInMs);\n\n// 4. Convert the new Date object back to a standard ISO string (in UTC).\nconst endTime = endDate.toISOString();\n\n// Return the original data along with the new endTime field\nreturn {\n  ...item,\n  endTime: endTime\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "8324583f-c621-4a63-a298-a5a747921b98",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create an event (Personal)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create an event (School)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3008e40e-5d61-416e-92c1-964cd41f3119",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bf1230323624538b0769d3beea2ee9c542c3254b35ac1ab8ba98cd4a2e0b047f"
  },
  "id": "Uy5iHsCN2KKpilua",
  "tags": []
}
